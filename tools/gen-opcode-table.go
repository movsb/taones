package main

import (
	"fmt"
)

// 寻址模式（Addressing Modes）
const (
	_                 byte = iota
	amImmediate            // 1  立即寻址
	amZero                 // 2  零页索引寻址
	amZeroX                // 3  零页直接寻址
	amZeroY                // 4  零页直接寻址
	amAbsolute             // 5  绝对寻址
	amAbsoluteX            // 6  绝对X寻址
	amAbsoluteY            // 7  绝对Y寻址
	amIndirect             // 8  间接寻址
	amIndexedIndirect      // 9  先索引后间接
	amIndirectIndexed      // 10 先间接后索引
	amRelative             // 11 相对寻址
	amImplied              // 12 隐含寻址
	amAccumulator          // 13 累加器寻址
)

type OpCode struct {
	code byte
	name string
	mode byte
}

var opcodesTable = [256]OpCode{
	{0x00, "BRK", 0},
	{0x01, "ORA", amIndexedIndirect},
	{0x02, "---", 0},
	{0x03, "---", 0},
	{0x04, "---", 0},
	{0x05, "ORA", amZero},
	{0x06, "ASL", amZero},
	{0x07, "---", 0},
	{0x08, "PHP", 0},
	{0x09, "ORA", amImmediate},
	{0x0A, "ASL", amAccumulator},
	{0x0B, "---", 0},
	{0x0C, "---", 0},
	{0x0D, "ORA", amAbsolute},
	{0x0E, "ASL", amAbsolute},
	{0x0F, "---", 0},
	{0x10, "BPL", amRelative},
	{0x11, "ORA", amIndirectIndexed},
	{0x12, "---", 0},
	{0x13, "---", 0},
	{0x14, "---", 0},
	{0x15, "ORA", amZeroX},
	{0x16, "ASL", amZeroX},
	{0x17, "---", 0},
	{0x18, "CLC", 0},
	{0x19, "ORA", amAbsoluteY},
	{0x1A, "---", 0},
	{0x1B, "---", 0},
	{0x1C, "---", 0},
	{0x1D, "ORA", amAbsoluteX},
	{0x1E, "ASL", amAbsoluteX},
	{0x1F, "---", 0},
	{0x20, "JSR", amAbsolute},
	{0x21, "AND", amIndexedIndirect},
	{0x22, "---", 0},
	{0x23, "---", 0},
	{0x24, "BIT", amZero},
	{0x25, "AND", amZero},
	{0x26, "ROL", amZero},
	{0x27, "---", 0},
	{0x28, "PLP", 0},
	{0x29, "AND", amImmediate},
	{0x2A, "ROL", amAccumulator},
	{0x2B, "---", 0},
	{0x2C, "BIT", amAbsolute},
	{0x2D, "AND", amAbsolute},
	{0x2E, "ROL", amAbsolute},
	{0x2F, "---", 0},
	{0x30, "BMI", amRelative},
	{0x31, "AND", amIndirectIndexed},
	{0x32, "---", 0},
	{0x33, "---", 0},
	{0x34, "---", 0},
	{0x35, "AND", amZeroX},
	{0x36, "ROL", amZeroX},
	{0x37, "---", 0},
	{0x38, "SEC", 0},
	{0x39, "AND", amAbsoluteY},
	{0x3A, "---", 0},
	{0x3B, "---", 0},
	{0x3C, "---", 0},
	{0x3D, "AND", amAbsoluteX},
	{0x3E, "ROL", amAbsoluteX},
	{0x3F, "---", 0},
	{0x40, "RTI", 0},
	{0x41, "EOR", amIndexedIndirect},
	{0x42, "---", 0},
	{0x43, "---", 0},
	{0x44, "---", 0},
	{0x45, "EOR", amZero},
	{0x46, "LSR", amZero},
	{0x47, "---", 0},
	{0x48, "PHA", 0},
	{0x49, "EOR", amImmediate},
	{0x4A, "LSR", amAccumulator},
	{0x4B, "---", 0},
	{0x4C, "JMP", amAbsolute},
	{0x4D, "EOR", amAbsolute},
	{0x4E, "LSR", amAbsolute},
	{0x4F, "---", 0},
	{0x50, "BVC", amRelative},
	{0x51, "EOR", amIndirectIndexed},
	{0x52, "---", 0},
	{0x53, "---", 0},
	{0x54, "---", 0},
	{0x55, "EOR", amZeroX},
	{0x56, "LSR", amZeroX},
	{0x57, "---", 0},
	{0x58, "CLI", 0},
	{0x59, "EOR", amAbsoluteY},
	{0x5A, "---", 0},
	{0x5B, "---", 0},
	{0x5C, "---", 0},
	{0x5D, "EOR", amAbsoluteX},
	{0x5E, "LSR", amAbsoluteX},
	{0x5F, "---", 0},
	{0x60, "RTS", 0},
	{0x61, "ADC", amIndexedIndirect},
	{0x62, "---", 0},
	{0x63, "---", 0},
	{0x64, "---", 0},
	{0x65, "ADC", amZero},
	{0x66, "ROR", amZero},
	{0x67, "---", 0},
	{0x68, "PLA", 0},
	{0x69, "ADC", amImmediate},
	{0x6A, "ROR", amAccumulator},
	{0x6B, "---", 0},
	{0x6C, "JMP", amIndirect},
	{0x6D, "ADC", amAbsolute},
	{0x6E, "ROR", amAbsolute},
	{0x6F, "---", 0},
	{0x70, "BVS", amRelative},
	{0x71, "ADC", amIndirectIndexed},
	{0x72, "---", 0},
	{0x73, "---", 0},
	{0x74, "---", 0},
	{0x75, "ADC", amZeroX},
	{0x76, "ROR", amZeroX},
	{0x77, "---", 0},
	{0x78, "SEI", 0},
	{0x79, "ADC", amAbsoluteY},
	{0x7A, "---", 0},
	{0x7B, "---", 0},
	{0x7C, "---", 0},
	{0x7D, "ADC", amAbsoluteX},
	{0x7E, "ROR", amAbsoluteX},
	{0x7F, "---", 0},
	{0x80, "---", 0},
	{0x81, "STA", amIndexedIndirect},
	{0x82, "---", 0},
	{0x83, "---", 0},
	{0x84, "---", 0},
	{0x85, "STA", amZero},
	{0x86, "STX", amZero},
	{0x87, "---", 0},
	{0x88, "DEY", amImplied},
	{0x89, "---", 0},
	{0x8A, "TXA", 0},
	{0x8B, "---", 0},
	{0x8C, "STY", amAbsolute},
	{0x8D, "STA", amAbsolute},
	{0x8E, "STX", amAbsolute},
	{0x8F, "---", 0},
	{0x90, "BCC", amRelative},
	{0x91, "STA", amIndirectIndexed},
	{0x92, "---", 0},
	{0x93, "---", 0},
	{0x94, "STY", amZeroX},
	{0x95, "STA", amZeroX},
	{0x96, "STX", amZeroY},
	{0x97, "---", 0},
	{0x98, "TYA", 0},
	{0x99, "STA", amAbsoluteY},
	{0x9A, "TXS", 0},
	{0x9B, "---", 0},
	{0x9C, "---", 0},
	{0x9D, "STA", amAbsoluteX},
	{0x9E, "---", 0},
	{0x9F, "---", 0},
	{0xA0, "LDY", amImmediate},
	{0xA1, "LDA", amIndexedIndirect},
	{0xA2, "LDX", amImmediate},
	{0xA3, "---", 0},
	{0xA4, "LDY", amZero},
	{0xA5, "LDA", amZero},
	{0xA6, "LDX", amZero},
	{0xA7, "---", 0},
	{0xA8, "TAY", 0},
	{0xA9, "LDA", amImmediate},
	{0xAA, "TAX", 0},
	{0xAB, "---", 0},
	{0xAC, "LDY", amAbsolute},
	{0xAD, "LDA", amAbsolute},
	{0xAE, "LDX", amAbsolute},
	{0xAF, "---", 0},
	{0xB0, "BCS", amRelative},
	{0xB1, "LDA", amIndirectIndexed},
	{0xB2, "---", 0},
	{0xB3, "---", 0},
	{0xB4, "LDY", amZeroX},
	{0xB5, "LDA", amZeroX},
	{0xB6, "LDX", amZeroY},
	{0xB7, "---", 0},
	{0xB8, "CLV", 0},
	{0xB9, "LDA", amAbsoluteY},
	{0xBA, "TSX", 0},
	{0xBB, "---", 0},
	{0xBC, "LDY", amAbsoluteX},
	{0xBD, "LDA", amAbsoluteX},
	{0xBE, "LDX", amAbsoluteY},
	{0xBF, "---", 0},
	{0xC0, "CPY", amImmediate},
	{0xC1, "CMP", amIndexedIndirect},
	{0xC2, "---", 0},
	{0xC3, "---", 0},
	{0xC4, "CPY", amZero},
	{0xC5, "CMP", amZero},
	{0xC6, "DEC", amZero},
	{0xC7, "---", 0},
	{0xC8, "INY", amImplied},
	{0xC9, "CMP", amImmediate},
	{0xCA, "DEX", amImplied},
	{0xCB, "---", 0},
	{0xCC, "CPY", amAbsolute},
	{0xCD, "CMP", amAbsolute},
	{0xCE, "DEC", amAbsolute},
	{0xCF, "---", 0},
	{0xD0, "BNE", amRelative},
	{0xD1, "CMP", amIndirectIndexed},
	{0xD2, "---", 0},
	{0xD3, "---", 0},
	{0xD4, "---", 0},
	{0xD5, "CMP", amZeroX},
	{0xD6, "DEC", amZeroX},
	{0xD7, "---", 0},
	{0xD8, "CLD", 0},
	{0xD9, "CMP", amAbsoluteY},
	{0xDA, "---", 0},
	{0xDB, "---", 0},
	{0xDC, "---", 0},
	{0xDD, "CMP", amAbsoluteX},
	{0xDE, "DE", amAbsoluteX},
	{0xDF, "---", 0},
	{0xE0, "CPX", amImmediate},
	{0xE1, "SBC", amIndexedIndirect},
	{0xE2, "---", 0},
	{0xE3, "---", 0},
	{0xE4, "CPX", amZero},
	{0xE5, "SBC", amZero},
	{0xE6, "INC", amZero},
	{0xE7, "---", 0},
	{0xE8, "INX", amImmediate},
	{0xE9, "SBC", amImmediate},
	{0xEA, "NOP", 0},
	{0xEB, "---", 0},
	{0xEC, "CPX", amAbsolute},
	{0xED, "SBC", amAbsolute},
	{0xEE, "INC", amAbsolute},
	{0xEF, "---", 0},
	{0xF0, "BEQ", amRelative},
	{0xF1, "SBC", amIndirectIndexed},
	{0xF2, "---", 0},
	{0xF3, "---", 0},
	{0xF4, "---", 0},
	{0xF5, "SBC", amZeroX},
	{0xF6, "INC", amZeroX},
	{0xF7, "---", 0},
	{0xF8, "SED", 0},
	{0xF9, "SBC", amAbsoluteY},
	{0xFA, "---", 0},
	{0xFB, "---", 0},
	{0xFC, "---", 0},
	{0xFD, "SBC", amAbsoluteX},
	{0xFE, "INC", amAbsoluteX},
	{0xFF, "---", 0},
}

func main() {
	s := ""
	for i, code := range opcodesTable {
		s += fmt.Sprintf("%d,", code.mode)
		if i > 0 && i%16 == 0 {
			s += "\n"
		}
	}
	fmt.Println(s)
}
